import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class Main {

    private static List<String> schema = new ArrayList<String>();

    public static void main(String[] args) {

        String patternPath = "C:\\Users\\Ariane\\git\\dfki\\Assignment1_800\\src\\resources\\imdb.csv";
        String patternPath2 = "C:\\Users\\Ariane\\git\\dfki\\Assignment1_800\\src\\resources\\rotten_tomatoes.csv";

        readData(patternPath);
        readData(patternPath2);
        cleanSchema();





	// write your code here
    }

    private static void cleanSchema() {
        for (Iterator<String> iterator = schema.iterator(); iterator.hasNext(); ){
            String one = iterator.next();
            for (Iterator<String> it = schema.iterator(); it.hasNext();  ){
                String two = it.next();
                System.out.println("out cleaning : " + one + ", " + two );
                if(!one.equals(two)){
                    System.out.println("out cleaning : " + one + ", " + two );
                    if(one.contains(two) || two.contains(one)){
                        System.out.println("im cleaning : " + one + ", " + two );
                        if(one.length() > two.length()){
                            schema.remove(one);
                        }
                        else{
                            schema.remove(two);
                        }
                    }
                }


            }
        }
        System.out.println(schema);

    }

    private static void readData(String filepath){

        try (BufferedReader br = new BufferedReader(new FileReader(filepath))) {
            boolean header = true;
            String sCurrentLine;

            while ((sCurrentLine = br.readLine()) != null) {
                String[] split = sCurrentLine.split(",");
                if(header){
                    createSchema(split);
                    header = false;
                }
                //System.out.println(split[0]);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    private static void createSchema(String[] split) {
        for(int i = 0; i < split.length; i++){
            // first cleaning:
            // lower case and remove empty fields
            String attribute = split[i].trim().toLowerCase().replace('"', ' ').replace(" ", "");
            if(!schema.contains(attribute))
            schema.add(attribute);
        }
        System.out.println(schema);
    }
}
